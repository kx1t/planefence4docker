#!/usr/bin/with-contenv bash
#shellcheck shell=bash

APPNAME="planefence"

echo "[$APPNAME] PlaneFence deployment started"

# -----------------------------------------------------------------------------------
# Copyright 2020, 2021 Ramon F. Kolb - licensed under the terms and conditions
# of GPLv3. The terms and conditions of this license are included with the Github
# distribution of this package, and are also available here:
# https://github.com/kx1t/planefence4docker/
#
# The package contains parts of, and modifications or derivatives to the following:
# Dump1090.Socket30003 by Ted Sluis: https://github.com/tedsluis/dump1090.socket30003
# These packages may incorporate other software and license terms.
#
# Programmers note: when using sed for URLs or file names, make sure NOT to use '/'
# as command separator, but use something else instead, for example '|'
#
# -----------------------------------------------------------------------------------
# LOOPTIME is the time between two runs of PlaneFence (in seconds)
[[ "$PF_INTERVAL" != "" ]] && LOOPTIME=$PF_INTERVAL || LOOPTIME=120
#
# PLANEFENCEDIR contains the directory where planefence.sh is location
PLANEFENCEDIR=/usr/share/planefence
# -----------------------------------------------------------------------------------
#
# Set logging in planefence.conf:
#
if [[ "$PF_LOG" == "off" ]]
then
	echo 0a
	LOGFILE=/dev/null
	sed -i 's/\(^\s*VERBOSE=\).*/\1'""'/' /usr/share/planefence/planefence.conf
else
	[[ "x$PF_LOG" == "x" ]] && LOGFILE="/tmp/planefence.log" || LOGFILE="$PF_LOG"
fi
echo pflog=$PF_LOG and logfile=$LOGFILE
sed -i 's|\(^\s*LOGFILE=\).*|\1'"$LOGFILE"'|' /usr/share/planefence/planefence.conf
#
# -----------------------------------------------------------------------------------
#
# read the environment variables and put them in the planefence.conf file:
[[ "x$FEEDER_LAT" != "x" ]] && sed -i 's/\(^\s*LAT=\).*/\1'"$FEEDER_LAT"'/' /usr/share/planefence/planefence.conf || { echo "Error - \$FEEDER_LAT ($FEEDER_LAT) not defined"; exit 99; }
[[ "x$FEEDER_LONG" != "x" ]] && sed -i 's/\(^\s*LON=\).*/\1'"$FEEDER_LONG"'/' /usr/share/planefence/planefence.conf || { echo "Error - \$FEEDER_LONG not defined"; exit 99; }
[[ "x$PF_MAXALT" != "x" ]] && sed -i 's/\(^\s*MAXALT=\).*/\1'"$PF_MAXALT"'/' /usr/share/planefence/planefence.conf
[[ "x$PF_MAXDIST" != "x" ]] && sed -i 's/\(^\s*DIST=\).*/\1'"$PF_MAXDIST"'/' /usr/share/planefence/planefence.conf
[[ "x$PF_NAME" != "x" ]] && sed -i 's/\(^\s*MY=\).*/\1'"$PF_NAME"'/' /usr/share/planefence/planefence.conf
[[ "x$PF_MAPURL" != "x" ]] && sed -i 's|\(^\s*MYURL=\).*|\1'"$PF_MAPURL"'|' /usr/share/planefence/planefence.conf
[[ "x$PF_TWEET" != "x" ]] && sed -i 's/\(^\s*PLANETWEET=\).*/\1'"$PF_TWEET"'/' /usr/share/planefence/planefence.conf
[[ "x$PF_SOCK30003HOST" != "x" ]] && sed 's/127_0_0_1/'"$PF_SOCK30003HOST"'/' /usr/share/planefence/planefence.conf
# -----------------------------------------------------------------------------------
#
# same for planeheat.sh
#
sed -i 's/\(^\s*LAT=\).*/\1'"$FEEDER_LAT"'/' /usr/share/planefence/planeheat.sh
sed -i 's/\(^\s*LON=\).*/\1'"$FEEDER_LONG"'/' /usr/share/planefence/planeheat.sh
[[ "x$PF_MAXALT" != "x" ]] && sed -i 's/\(^\s*MAXALT=\).*/\1'"$PF_MAXALT"'/' /usr/share/planefence/planeheat.sh
[[ "x$PF_MAXDIST" != "x" ]] && sed -i 's/\(^\s*DIST=\).*/\1'"$PF_MAXDIST"'/' /usr/share/planefence/planeheat.sh
# -----------------------------------------------------------------------------------
#
#--------------------------------------------------------------------------------
# Now loop forever, after waiting for 1 cycle. The wait is so socket30003 can actually collect some data before we try to call PlaneFence
echo "[$APPNAME] PlaneFence is starting in $LOOPTIME..."
sleep $LOOPTIME
echo "[$APPNAME] PlaneFence starting its initial run now"
while true
do
	$PLANEFENCEDIR/planefence.sh >>$LOGFILE
	echo "[$APPNAME] PlaneFence has exited... restarting in $LOOPTIME"
	sleep $LOOPTIME
	echo "[$APPNAME] PlaneFence restarting now"
done
